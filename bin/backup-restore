#!/usr/bin/env python3
import hashlib
import contextlib
import collections
import os
import sys
import subprocess
import tarfile
import os
import tempfile

if '-h' in sys.argv or '--help' in sys.argv or len(sys.argv) != 2:
    print('usage: backup-restore "^\./dir/file\..*$"', file=sys.stderr)
    print('usage: BACKUP_PATH=$PATH BACKUP_ALT_INDEX=$INDEX backup-restore "^\./dir/file\..*$"', file=sys.stderr)
    print('note: to preview restore, use backup-find instead of backup-restore', file=sys.stderr)
    sys.exit(1)

co = lambda *a: subprocess.check_output(' '.join(map(str, a)), shell=True, executable='/bin/bash').decode('utf-8').strip()
cc = lambda *a: subprocess.check_call(' '.join(map(str, a)), shell=True, executable='/bin/bash')

def tree():
    return collections.defaultdict(tree)

lines = co('backup-find', sys.argv[1]).splitlines()
lines = [x.split('\t') for x in lines]
tarballs = tree()
for line in lines:
    dst_path, tarball, blake2b, size = line
    src_path = dst_path
    if tarball.startswith('ref::'):
        _, tarball, src_path  = tarball.split('::', 2)
    tarballs[tarball]['dsts'][dst_path] = (src_path, blake2b) # one dst always has one src
    tarballs[tarball]['srcs'][src_path][dst_path] = blake2b # one src may have many dst

download_dir = tempfile.mkdtemp()
print(download_dir)

@contextlib.contextmanager
def cd(path):
    orig = os.path.abspath(os.getcwd())
    os.chdir(path)
    try:
        yield
    except:
        raise
    finally:
        os.chdir(orig)

def hash_file(path):
    blake2b = hashlib.blake2b()
    with open(path, 'rb') as f:
        while True:
            data = f.read(1024 ** 2)
            if not data:
                break
            blake2b.update(data)
    return blake2b.hexdigest()

for tarball in sorted(tarballs):
    print('unpack tarball:', tarball)
    with cd(download_dir):
        cc('"-backup-get"', tarball)
        tarball_abspath = os.path.abspath(tarball)

    srcs = tarballs[tarball]['srcs']
    dsts = tarballs[tarball]['dsts']

    with tarfile.open(tarball_abspath, 'r') as tar:
        for member in tar.getmembers():
            src_path = member.name
            if src_path in srcs:
                for dst_path, blake2b in srcs[src_path].items():
                    # extract
                    print('extract:', dst_path, end='')
                    tar.extract(member, ".")
                    # handle ref::
                    if src_path != dst_path:
                        print(f' was a reference of {src_path}')
                        try:
                            os.makedirs(os.path.dirname(dst_path))
                        except FileExistsError:
                            pass
                        os.rename(src_path, dst_path)
                        # cleanup empty dirs from the ref::
                        orig = os.getcwd()
                        with cd(os.path.dirname(src_path)):
                            while orig != os.getcwd():
                                name = os.path.basename(os.getcwd())
                                os.chdir('..')
                                print('cleanup:', os.getcwd(), name)
                                try:
                                    os.rmdir(name)
                                except OSError:
                                    break
                    else:
                        print()
                    # validate checksum
                    new_blake2b = hash_file(dst_path)
                    if blake2b != new_blake2b:
                        print(f'error: checksum failed for {dst_path} {new_blake2b} should have been {blake2b}')
                        sys.exit(1)
                    # mark dst_path as finished
                    del dsts[dst_path]

    if dsts:
        print('failed to extract all files, missing:')
        for dst_path, _ in dsts.values():
            print('', dst_path)
        sys.exit(1)

    cc('rm -v', tarball_abspath)
