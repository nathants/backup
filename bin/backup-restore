#!/usr/bin/env python3
# type: ignore
import shutil
import hashlib
import contextlib
import collections
import os
import sys
import subprocess
import tarfile
import os
import tempfile

if '-h' in sys.argv or '--help' in sys.argv or len(sys.argv) not in [2, 3]:
    print('description: restore files from remote storage by regex at revision\n', file=sys.stderr)
    print('usage: backup-restore REGEX [REVISION]', file=sys.stderr)
    sys.exit(1)

check_output = lambda *a: subprocess.check_output(' '.join(map(str, a)), shell=True, executable='/bin/bash').decode('utf-8').strip()
check_call = lambda *a: subprocess.check_call(' '.join(map(str, a)), shell=True, executable='/bin/bash')

regex = sys.argv[1]

revision = 'HEAD'
if len(sys.argv) == 3:
    revision = sys.argv[2]

def tree():
    return collections.defaultdict(tree)

lines = check_output(f'backup-find "{regex}" {revision}').splitlines()
lines = [x.split('\t') for x in lines]
tarballs = tree()
for line in lines:
    path, tarball, blake2b, size = line
    tarballs[tarball][blake2b][path] = None

tempdir = tempfile.mkdtemp()
print('tempdir:', tempdir, file=sys.stderr)

@contextlib.contextmanager
def cd(path):
    orig = os.path.abspath(os.getcwd())
    os.chdir(path)
    try:
        yield
    except:
        raise
    finally:
        os.chdir(orig)

def hash_file(path):
    with open(path, 'rb') as f:
        data = f.read()
    return hashlib.blake2b(data).hexdigest()

for tarball in sorted(tarballs):
    print('unpack:', tarball, file=sys.stderr)

    # restore symlinks from index
    if tarball == 'symlink':
        for target, sources in tarballs[tarball].items():
            for source in sources:
                try:
                    os.remove(source)
                except FileNotFoundError:
                    pass
                try:
                    os.makedirs(os.path.dirname(source))
                except FileExistsError:
                    pass
                os.symlink(os.path.relpath(target, os.path.dirname(source)), source)
                print(target, source)

    # restore files from tarball
    else:
        with cd(tempdir):
            check_call('"-backup-get"', tarball)
            tarball_abspath = os.path.abspath(tarball)

        with tarfile.open(tarball_abspath, 'r') as tar:
            for member in tar.getmembers():
                blake2b = member.name
                paths = tarballs[tarball][blake2b]
                if paths:

                    # extract
                    tar.extract(member, tempdir)

                    # validate checksum
                    actual_blake2b = hash_file(os.path.join(tempdir, blake2b))
                    if blake2b != actual_blake2b:
                        print(f'fatal: checksum failed for {tarball} {actual_blake2b} should have been {blake2b}', file=sys.stderr)
                        sys.exit(1)

                    # copy every file that references this blake2b
                    for path in paths:
                        try:
                            os.makedirs(os.path.dirname(path))
                        except FileExistsError:
                            pass
                        shutil.copyfile(os.path.join(tempdir, blake2b), path)
                        print(path, blake2b)

        check_call('rm', tarball_abspath)

assert tempdir.startswith('/tmp/'), f'fatal: will not rmdir without prefix /tmp/, {tempdir}'
check_call('rm -rf', tempdir)
